************************************************* CSS Selectors ********************************************************

**Locating Elements by Attribute

    Let’s imagine we have a tag with the following attributes [id, class, name, value]
    <input type="text" id="fistname" name="first_name" class="myForm">
    The generic way of locating elements by their attribute in CSS Selectors is

    css = element_name[<attribute_name>='<value>']
    e.g. css=input[name='first_name']

    We can use the same approach to locate by id and class attributes, however,
    there are short forms that we can use to make it more readable.

    In CSS, we can use # notation to select the id:

    css="input#firstname" or just css="#firstname"
    We can also use the . notation to select the class

    css="input.myForm" or just css=".myForm"
    Take extra care when using the short form notations,
    especially the . class notation as there could be many web elements on the HTML source with the same class attribute.

**Locating elements with More Than One Attribute

    Sometimes there is a need to be more specific with the selection criteria in order to locate the correct element.
    Suppose you have an HTML snippet as below

    <div class="ajax_enabled" style="display:block">
    The value of the display could either be “none” or “block” depending on the ajax call. In this situation,
    we have to locate the element by both class and style.

    We could use
    css="div[class='ajax_enabled'] [style='display:block']"

**Locating Child Element
    <div id="child"><img src="./logo.png"></div>
    To locate the image tag, we would use:

    css="div#child img"

    There are occasions when there are multiple child elements within the same parent element such as list elements
    <ul id="fruit">
        <li>Apple</li>
        <li>Orange</li>
        <li>Banana</li>
    </ul>
    As can be seen, the individual list elements don’t have any id associated with them.
    If we want to locate the element with text ‘Orange’, we have to use “nth-of-type”

    css="ul#fruit li:nth-of-type(2)"

    Similarly, if we need to select the last child element, i.e. ‘Banana’, we can use
    css="ul#fruit li:last-child"

**Strings and Randomly Generated Ids
    We can also use string matchers to locate elements.
    This is particularly useful when we want to find elements that start with a certain character(s),
    end with a certain character(s) or contain a particular character(s).

    Starts with, Ends with and Contains
    In this example, all the three div elements contain the word ‘random’.

    <div id="123_randomId">
    <div id="randomId_456">
    <div id="123_pattern_randomId">
    If we want to select the first div element, we would use ^= which means ‘starts with’:
    css="div[id^='123']"

    To select the second div element, we would use $= which means ‘ends with’:
    css="div[id$='456']"

    And to select the last div element we would use *= which means ‘sub-string’
    css="div[id*='_pattern_']"

    We can also use the ‘contains’
    css="div:contains(_pattern_)"

**Attribute NOT contain a specific value
    In WebDriver, how do you find elements whose attribute contain values which you don’t want to select?
    This CSS selector example shows how NOT to select by specific attribute value

    Suppose you have many elements which share the same attribute and attribute value,
    but some of those elements have other variables appended to the value. e.g:

    <div class="day past calendar-day-2017-02-13 calendar-dow-1 unavailable">
    <div class="day today calendar-day-2017-02-14 calendar-dow-2 unavailable">
    <div class="day calendar-day-2017-02-15 calendar-dow-3">
    <div class="day calendar-day-2017-02-16 calendar-dow-4">
    In the above snippet, we want to select an available day (i.e. the two last divs)

    As can be seen, all four divs contain “calendar-day-” but the first two also contain “unavailable” which we don’t want.
    The CSS selector for Not selecting the first two divs is
    css = "div[class*=calendar-day-]:not([class*='unavailable'])"

**CSS Selectors Reference

Selector	        Example	                                Example description

.class	            .intro	                                Selects all elements with class="intro"
.class1.class2	    <div class="name1 name2">...</div>	    Selects all elements with both name1 and name2 set within its class attribute
.class1 .class2	<div class="name1"><div class="name2">..</div></div>	Selects all elements with name2 that is a descendant of an element with name1
#id	                #firstname	                            Selects the element with id="firstname"
*	                *	                                    Selects all elements
element	            p	                                    Selects all <p> elements
element,element	    div, p	                                Selects all <div> elements and all <p> elements
element element	    div p	                                Selects all <p> elements inside <div> elements
element>element	    div > p	                                Selects all <p> elements where the parent is a <div> element
element+element	    div + p	                                Selects all <p> elements that are placed immediately after <div> elements
element1~element2	p ~ ul	                                Selects every <ul> element that are preceded by a <p> element
[attribute]	        [target]	                            Selects all elements with a target attribute
[attribute=value]	[target=_blank]	                        Selects all elements with target="_blank"
[attribute~=value]	[title~=flower]	                        Selects all elements with a title attribute containing the word "flower"
[attribute|=value]	[lang|=en]	                            Selects all elements with a lang attribute value starting with "en"
[attribute^=value]	a[href^="https"]	                    Selects every <a> element whose href attribute value begins with "https"
[attribute$=value]	a[href$=".pdf"]	                        Selects every <a> element whose href attribute value ends with ".pdf"
[attribute*=value]	a[href*="w3schools"]	                Selects every <a> element whose href attribute value contains the substring "w3schools"
:active	            a:active	                            Selects the active link
::after	            p::after	                            Insert something after the content of each <p> element
::before	        p::before	                            Insert something before the content of each <p> element
:checked	        input:checked	                        Selects every checked <input> element
:default	        input:default	                        Selects the default <input> element
:disabled	        input:disabled	                        Selects every disabled <input> element
:empty	            p:empty	                                Selects every <p> element that has no children (including text nodes)
:enabled	        input:enabled	                        Selects every enabled <input> element
:first-child	    p:first-child	                        Selects every <p> element that is the first child of its parent
::first-letter	    p::first-letter	                        Selects the first letter of every <p> element
::first-line	    p::first-line	                        Selects the first line of every <p> element
:first-of-type	    p:first-of-type	                        Selects every <p> element that is the first <p> element of its parent
:focus	            input:focus	                            Selects the input element which has focus
:hover	            a:hover	                                Selects links on mouse over
:in-range	        input:in-range	                        Selects input elements with a value within a specified range
:indeterminate	    input:indeterminate	                    Selects input elements that are in an indeterminate state
:invalid	        input:invalid	                        Selects all input elements with an invalid value
:lang(language)	    p:lang(it)	                            Selects every <p> element with a lang attribute equal to "it" (Italian)
:last-child	        p:last-child	                        Selects every <p> element that is the last child of its parent
:last-of-type	    p:last-of-type	                        Selects every <p> element that is the last <p> element of its parent
:link	            a:link	                                Selects all unvisited links
:not(selector)	    :not(p)	                                Selects every element that is not a <p> element
:nth-child(n)	    p:nth-child(2)	                        Selects every <p> element that is the second child of its parent
:nth-last-child(n)	p:nth-last-child(2)	                    Selects every <p> element that is the second child of its parent, counting from the last child
:nth-last-of-type(n)    p:nth-last-of-type(2)	            Selects every <p> element that is the second <p> element of its parent, counting from the last child
:nth-of-type(n)	        p:nth-of-type(2)	                Selects every <p> element that is the second <p> element of its parent
:only-of-type	    p:only-of-type	                        Selects every <p> element that is the only <p> element of its parent
:only-child	        p:only-child	                        Selects every <p> element that is the only child of its parent
:optional	        input:optional	                        Selects input elements with no "required" attribute
:out-of-range	    input:out-of-range	                    Selects input elements with a value outside a specified range
::placeholder	    input::placeholder	                    Selects input elements with placeholder text
:read-only	        input:read-only	                        Selects input elements with the "readonly" attribute specified
:read-write	        input:read-write	                    Selects input elements with the "readonly" attribute NOT specified
:required	        input:required	                        Selects input elements with the "required" attribute specified
:root	            :root	                                Selects the document's root element
::selection	        ::selection	                            Selects the portion of an element that is selected by a user
:target	            #news:target	                        Selects the current active #news element (clicked on a URL containing that anchor name)
:valid	            input:valid	                            Selects all input elements with a valid value
:visited	        a:visited	                            Selects all visited links
